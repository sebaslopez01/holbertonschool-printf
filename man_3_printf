.TH _printf "Jul 21, 2022" "_printf man page"

.SH NAME
 .B _printf\fR \- formatted output conversion
 
.SH SYNOPSIS
.B  #include \fB"main.h"

.B int _printf(const char *\fIformat\fB, ...);

.PP
.BI int _printf_helper(const char *format, va_list args, char *buffer);
.BI unsigned int count_space(const char *format, va_list args);
.BI void (*get_op_func(char c))(char *, va_list, int *);
.BI void op_string(char *buffer, va_list args, int *count);
.BI void op_char(char *buffer, va_list args, int *count);
.BI void op_number(char *buffer, va_list args, int *count);
.BI void op_binary(char *buffer, va_list args, int *count);
.BI unsigned int (*get_op_func_space(char c))(va_list);
.BI unsigned int op_char_count(va_list args);
.BI unsigned int op_string_count(va_list args);
.BI unsigned int op_number_count(va_list args);
.BI unsigned int op_binary_count(va_list args);
.BI char *itoa(int num, char *buffer, int base);
.BI void reverse_string(char *str);

.SH DESCRIPTION
The \fB_printf()\fR function writes output to the standard output. According to its parameters passed via variable length argument.
Through the directives passed on a \fIformat\fR string.

.B Return Value
.in +2n
Returns the number of characters printed but excluding the null byte used to end output to strings.

If an error happens, -1 is returned.

.in
.B Format String
.in +2n
The format string is a constant characters pointer that specifies how subsequent arguments to the output are converted, composed of zero or more 
directives that make up the string format that are compiled into the output, but not the \fB%\fR. Is also made up of conversion specifiers, 
returns 0 or more arguments, in the conversion specifications it is assigned the character \fB%\fR and ending with the conversion specifier.


.B Conversion Specifiers
.in +2n
A character that specifies the type of conversion to be applied.
The conversion specifiers and their meanings are:

.RS
.B d, i
.in +2n
The \fIint\fR argument is converted to signed decimal notation.
.in
.RE

.RS
.B o, u, x
.in +2n
The \fIunsigned int\fR argument is converted to unsigned octal (\fBo\fR), unsigned decimal (\fBu\fR), 
or unsigned hexadecimal (\fBx\fR and \fBX\fR) notation. 
The letters \fBabcdef\fR are used for \fBx\fR conversions; the 
letters \fBABCDEF\fR are used for \fBX\fR conversions.
.in
.RE

.RS
.B b
.in +2n
The \fIunsigned int\fR argument is converted to binary notation.
.in
.RE

.RS
.B c
.in +2n
The \fIint\fR changes to an \fIunsigned char\fR, then the resulting character is written.
.in
.RE

.RS
.B s
.in +2n
The \fIconst char *\fR argument is expected to be a pointer to an array of character  type  (pointer  to a string).  
Characters from the array are written up to (but not including) a terminating null byte ('\\0').
.in
.RE

.RS
.B S
.in +2n
Same as \fBs\fR conversion specifier, except that any printable characters 
(0 < ASCII value < 32 or >= 127) are printed this way: \fB\\x\fR, 
followed by the ASCII code value in hexadecimal (upper case - always 2 characters).
.in
.RE

.RS
.B r
.in +2n
Same as \fBs\fR conversion specifies, except that the string is written in
reverse order.
.in
.RE

.RS
.B R
.in +2n
Same as \fBs\fR conversion specifier, except that the string is converted
to ROT13 encryption.
.in
.RE

.RS
.B p
.in +2n
The \fIvoid *\fR pointer argument is printed in hexadecimal (as if by \fB%#x\fR or \fB%#lx\fR).
.in
.RE

.RS
.B %
.in +2n
A '%' is written.  No argument is converted.  The complete conversion specification is '%%'.
.in
.RE

.SH BUGS
Code such as \fBprintf(\fIfoo\fB);\fR often indicates a bug, since \fIfoo\fR may contain a % character.

.SH NOTES
This _printf project is a project emulating the printf function in C, by students Sebasti치n L칩pez and Alexander Ayala from Holberton School cohort 18. 

.SH EXAMPLE
To print a string and a number, and its length in decimal.

.RS
#include "main.h"

int main(void)
{
        int len, num = 20;
        char *str = "Hello World!";
        
        len = _printf("%s %d\\n", str, num);
        
        _printf("Contains %d characters\\n", len);
        
        return (0);
}
.RE

.SH SEE ALSO
printf(3)
.PP
Full documentation at: <https://www.gnu.org/software/coreutils/printf> or available locally via: info '(coreutils) printf invocation'

.SH AUTHORS
.B Sebasti치n L칩pez
.B Alexander Ayala
